require './lib/functions'

#By http://en.wikipedia.org/wiki/Pythagorean_triple
#all primitive Pythagorean triplets are generated by all pairs of integers (m, n) such that m > n, m, n coprime, and m != n mod 2.
#m, n -> a + b + c = 2m^2 + 2 mn = 2m(m + n)

max_sum = 1500000

def ns_for_m(m)
  (1...m).select { |n| ((n % 2) != (m % 2)) && coprime(m, n) }
end

#If a+b+c = (2m)(m + n) <= max, then 2m^2 < max or m < sqrt(max/2)
mns = (2..Math.sqrt(max_sum / 2).floor).inject([]) { |acc, m| acc + ns_for_m(m).map { |n| [m, n] } }
primitive_triplet_sums = mns.map { |m, n| 2*m*(m + n) }
puts "Got all sums -- there are #{primitive_triplet_sums.count}"

#Go through each primitive and add 1 to all the multiples
counts = []
primitive_triplet_sums.each do |sum|
  i = sum
  while(i < max_sum)
    counts[i] = (counts[i] || 0) + 1
    i += sum
  end
end

assert_equal 161667, counts.count { |c| c == 1 }
